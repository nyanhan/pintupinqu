#!/usr/bin/env node

var fs            = require("fs");
var program       = require("commander");
var server        = require("../lib/server");
var pack          = require("../lib/pack");
var rsync         = require("../lib/rsync");
var mkdirp        = require('mkdirp');
var path          = require('path');
var wrench        = require("wrench");
var os            = require("os");
var child_process = require("child_process");

global.PROJECT_ROOT = process.cwd();

var Config = {};

try {
    Config = JSON.parse(fs.readFileSync(path.resolve(__dirname, "../package.json")).toString());
} catch(e) {/* throw e; */}


program
    .version(Config.version)
    .option("-i, --init", "init a new project.")
    .option("-L, --lint", "run jshint in current folder.")
    .option("-l, --listen <port>", "start pin server, listen <port> (< 1024 needs sudo).")
    .option("-s, --server <port>", "start static server, listen <port> (< 1024 needs sudo).")
    .option("-p, --pack", "pack & min code for release.")
    .option("-u, --upload [path]", "rsync to server, read config sftp-config.json")
    .option("-v, --new_version", "generate new version number.")
    .option("--no-compress", "pack code do not compress.")
    .parse(process.argv);

function test(){
    try {
        global.PACK_VERSION = fs.readFileSync("version").toString().trim();
    } catch(e) {
        console.error("Read version file failed.. \n%s", e);
        process.exit(1);
    }
}

function try_read_config(){
    var string = "";

    try {
        string = fs.readFileSync("sftp-config.json")
                    .toString().trim()
                    .replace(/\/\/.*/g, "");

        return JSON.parse(string);
    } catch(e) {
        console.error("Read sftp-config.json file failed.. \n%s", e);
        process.exit(1);
    }
}

if (program.init) {

    fs.writeFileSync("version", "");
    mkdirp.sync("_src_/scripts");
    mkdirp.sync("_src_/styles");
    mkdirp.sync("lib");

} else if (program.lint) {

    var jshint = path.resolve(__dirname, "../node_modules/.bin/jshint");

    jshint += (" " + global.PROJECT_ROOT);

    jshint += " --config " + path.resolve(__dirname, "../.jshintrc");

    child_process.exec(jshint, function(error, stdout, stderr){
        console.log(stdout);
    });

} else if (program.upload) {
    var config = try_read_config();

    if (!config) {
        return console.error("No server info config..");
    }

    var p = ".";

    if (program.upload && program.upload !== true) {
        p = program.upload;
    }

    var dir = path.resolve(p);
    var root = config.remote_path;

    var stat = fs.lstatSync(dir);

    if (stat.isDirectory()){
        dir += (os.platform().toLowerCase() === "win32" ? "\\" : "/");
    }

    rsync.send({
        file    : dir,
        user    : config.user,  
        host    : config.host,  
        port    : config.port || '22',        
        path    : path.resolve(root, p),
        key     : config.ssh_key_file
    }, function(e, log){
        if (e) {
            console.error("Error occurred with rsync..\n%s", e);
        } else {
            // console.log(log);
            console.log("[NOTICE]: rsync upload success..........................");
        }
    });
    
} else if (program.listen) {
    test();
    server.listen(program.listen, true);
} else if (program.server) {
    test();
    server.listen(program.server);
} else if (program.new_version) {
    test();
    pack.version();
} else if (program.pack) {
    test();
    pack.min(program.compress);   
} else {
    console.log(program.helpInformation());
}


