#!/usr/bin/env node

var fs            = require("fs");
var path          = require('path');

global.CONFIG_HASH = try_read_config();
global.PROJECT_ROOT = path.resolve(process.cwd(), global.CONFIG_HASH.static || "");

var program       = require("commander");
var server        = require("../lib/server");
var pack          = require("../lib/pack");
var rsync         = require("../lib/rsync");
var less_clr      = require("../lib/less_clr");
var util          = require("../lib/util");
var mkdirp        = require('mkdirp');
var wrench        = require("wrench");
var os            = require("os");
var child_process = require("child_process");
var watch         = require("watch");

var Config = {};

try {
    Config = JSON.parse(fs.readFileSync(path.resolve(__dirname, "../package.json")).toString());
} catch(e) {/* throw e; */}


program
    .version(Config.version)
    .option("-i, --init", "init a new project.")
    .option("-L, --lint", "run jshint in current folder.")
    .option("-l, --listen <port>", "start pin server, listen <port> (< 1024 needs sudo).")
    .option("-s, --server <port>", "start static server, listen <port> (< 1024 needs sudo).")
    .option("-p, --pack", "pack & min code for release.")
    .option("-u, --upload [path]", "rsync to server, read config sftp.")
    .option("-v, --new_version", "generate new version number.")
    .option("-w, --watch", "auto build less code when changed.")
    .option("-b, --build", "manual build code.")
    .option("--no-compress", "pack code do not compress.")
    .parse(process.argv);

function test(){
    try {
        global.PACK_VERSION = fs.readFileSync(path.resolve(global.PROJECT_ROOT, "version")).toString().trim();
    } catch(e) {
        console.error("Read version file failed.. \n%s", e);
        process.exit(1);
    }
}

function try_read_config(){
    var string = "";
    try {
        string = fs.readFileSync("pinrc.json")
                    .toString().trim()
                    .replace(/\/\/.*/g, "");

        return JSON.parse(string);
    } catch(e) {
        console.error("Read pinrc.json file failed.. \n%s", e);
        process.exit(1);
    }
}

function build_lessc(){
    var less = global.CONFIG_HASH.less;

    if (!less) {
        console.error("No less folder config..\n");
    }

    for (var k in less) {
        if (less.hasOwnProperty(k)) {

            var tar = path.resolve(global.PROJECT_ROOT, less[k]);

            if (fs.existsSync(tar)) {
                // 如果目录存在 删除掉
                (function(p){

                    var files = util.readFilesDeep(p);

                    files.forEach(function(item){
                        fs.unlinkSync(item);
                    });

                })(path.resolve(global.PROJECT_ROOT, less[k]));

                fs.rmdirSync(path.resolve(global.PROJECT_ROOT, less[k]));
            }

            // 重建目录
            mkdirp.sync(tar);

            (function(p){

                function mp(f) {
                    return path.resolve(global.PROJECT_ROOT, less[k], path.relative(p, f).replace(".less", ".css"));
                }

                var files = util.readFilesDeep(p);

                files.forEach(function(item){
                    less_clr.build(item, mp(item));
                });

            })(path.resolve(global.PROJECT_ROOT, k));
        }
    }
}

if (program.init) {

    fs.writeFileSync(path.resolve(global.PROJECT_ROOT, "version"), "");
    mkdirp.sync(path.resolve(global.PROJECT_ROOT, "_src_/less"));
    mkdirp.sync(path.resolve(global.PROJECT_ROOT, "_src_/scripts"));
    mkdirp.sync(path.resolve(global.PROJECT_ROOT, "_src_/styles"));
    mkdirp.sync(path.resolve(global.PROJECT_ROOT, "lib"));

} else if (program.lint) {

    var jshint = path.resolve(__dirname, "../node_modules/.bin/jshint");

    jshint += (" " + global.PROJECT_ROOT);

    jshint += " --config " + path.resolve(__dirname, "../.jshintrc");

    child_process.exec(jshint, function(error, stdout, stderr){
        console.log(stdout);
    });

} else if (program.upload) {

    var config = global.CONFIG_HASH;

    if (!config || !config.sftp) {
        return console.error("No server info config..");
    }

    config = config.sftp;

    var p = ".";

    if (program.upload && program.upload !== true) {
        p = program.upload;
    }

    var dir = path.resolve(p);
    var root = config.remote_path;

    var stat = fs.lstatSync(dir);

    if (stat.isDirectory()){
        dir += (os.platform().toLowerCase() === "win32" ? "\\" : "/");
    }

    rsync.send({
        file : dir,
        user : config.user,
        host : config.host,
        port : config.port || '22',
        path : path.resolve(root, p),
        key  : config.ssh_key_file
    }, function(e, log){
        if (e) {
            console.error("Error occurred with rsync..\n%s", e);
        } else {
            console.log(log);
            console.log("[NOTICE]: rsync upload success..........................");
        }
    });

} else if (program.listen) {
    test();
    server.listen(program.listen, true);
} else if (program.server) {
    test();
    server.listen(program.server);
} else if (program.new_version) {
    test();
    pack.version();
} else if (program.pack) {
    test();
    build_lessc();
    pack.min(program.compress, program.datauri);
} else if (program.watch) {

    var watchList = global.CONFIG_HASH.watch;

    if (!watchList) {
        console.error("No watch folder config..\n");
    }

    watchList.forEach(function(item){

        var p = path.resolve(global.PROJECT_ROOT, item);

        console.log("Watching " + p);

        watch.createMonitor(p, function (monitor) {
            monitor.on("created", function (f, stat) {
                build_lessc();
            });

            monitor.on("changed", function (f, curr, prev) {
                build_lessc();
            });

            monitor.on("removed", function (f, stat) {
                build_lessc();
            });
        });

    });

} else if (program.build) {
    test();
    build_lessc();
} else {
    console.log(program.helpInformation());
}


